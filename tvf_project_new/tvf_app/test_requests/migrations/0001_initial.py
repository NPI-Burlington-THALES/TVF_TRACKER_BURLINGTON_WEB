# Generated by Django 5.2.1 on 2025-05-26 00:25

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the customer', max_length=255, unique=True)),
                ('sla_days', models.IntegerField(default=0, help_text='Service Level Agreement in days for this customer (for analytics)')),
                ('contact_person', models.CharField(blank=True, help_text='Primary contact person for the customer', max_length=255, null=True)),
                ('email', models.EmailField(blank=True, help_text='Contact email for the customer', max_length=254, null=True)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number for the customer', max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RejectReason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(help_text='Reason for rejecting a TVF', max_length=255, unique=True)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the reason', null=True)),
            ],
            options={
                'verbose_name': 'Reject Reason',
                'verbose_name_plural': 'Reject Reasons',
                'ordering': ['reason'],
            },
        ),
        migrations.CreateModel(
            name='TestRequestPhaseDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the phase (e.g., Data Entry, Personalization, Quality, Shipping)', max_length=255, unique=True)),
                ('order', models.IntegerField(help_text='Order in which phases typically occur', unique=True)),
            ],
            options={
                'verbose_name': 'TVF Phase Definition',
                'verbose_name_plural': 'TVF Phase Definitions',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='TVFEnvironment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the TVF environment (e.g., PAT, UAT, PROD)', max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'TVF Environment',
                'verbose_name_plural': 'TVF Environments',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TVFStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the TVF status', max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'TVF Status',
                'verbose_name_plural': 'TVF Statuses',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TVFType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the TVF type', max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'TVF Type',
                'verbose_name_plural': 'TVF Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the change occurred')),
                ('action', models.CharField(help_text="Type of action (e.g., 'created', 'updated', 'deleted')", max_length=255)),
                ('model_name', models.CharField(help_text='Name of the model that was changed', max_length=255)),
                ('record_id', models.CharField(help_text='ID of the record that was changed', max_length=255)),
                ('field_name', models.CharField(blank=True, help_text='Specific field that was changed (if applicable)', max_length=255, null=True)),
                ('old_value', models.TextField(blank=True, help_text='Old value of the field (if applicable)', null=True)),
                ('new_value', models.TextField(blank=True, help_text='New value of the field (if applicable)', null=True)),
                ('change_details', models.TextField(blank=True, help_text='JSON or text details of the change', null=True)),
                ('user', models.ForeignKey(blank=True, help_text='User who made the change', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the project', max_length=255)),
                ('trustport_folder_base', models.CharField(blank=True, help_text='Base Trustport folder for data processing for this project', max_length=255, null=True)),
                ('dispatch_method_default', models.CharField(blank=True, help_text='Default dispatch method for this project', max_length=255, null=True)),
                ('customer', models.ForeignKey(help_text='The customer associated with this project', on_delete=django.db.models.deletion.PROTECT, to='test_requests.customer')),
                ('tvf_environment', models.ForeignKey(help_text='The TVF environment for this project', on_delete=django.db.models.deletion.PROTECT, to='test_requests.tvfenvironment')),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'ordering': ['customer__name', 'name', 'tvf_environment__name'],
                'unique_together': {('customer', 'name', 'tvf_environment')},
            },
        ),
        migrations.CreateModel(
            name='PlasticCodeLookup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text="The unique plastic code (e.g., '01200733')", max_length=155, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of the plastic code', null=True)),
                ('customer', models.ForeignKey(help_text='The customer this plastic code belongs to', on_delete=django.db.models.deletion.PROTECT, to='test_requests.customer')),
                ('project', models.ForeignKey(help_text='The project this plastic code is used in', on_delete=django.db.models.deletion.PROTECT, to='test_requests.project')),
                ('tvf_environment', models.ForeignKey(help_text='The TVF environment for this plastic code', on_delete=django.db.models.deletion.PROTECT, to='test_requests.tvfenvironment')),
            ],
            options={
                'verbose_name': 'Plastic Code Lookup',
                'verbose_name_plural': 'Plastic Code Lookups',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='DispatchMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the dispatch method', max_length=255)),
                ('customer', models.ForeignKey(blank=True, help_text='The customer this dispatch method is available for', null=True, on_delete=django.db.models.deletion.PROTECT, to='test_requests.customer')),
                ('project', models.ForeignKey(blank=True, help_text='The project this dispatch method is available for', null=True, on_delete=django.db.models.deletion.PROTECT, to='test_requests.project')),
            ],
            options={
                'verbose_name': 'Dispatch Method',
                'verbose_name_plural': 'Dispatch Methods',
                'ordering': ['name'],
                'unique_together': {('customer', 'project', 'name')},
            },
        ),
        migrations.CreateModel(
            name='TestRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tvf_number', models.IntegerField(db_index=True, editable=False, help_text='Unique auto-incrementing TVF Number', unique=True)),
                ('cr_number', models.CharField(blank=True, help_text='Change Request Number from requestor', max_length=255, null=True)),
                ('tvf_name', models.CharField(help_text='Name of the TVF', max_length=255)),
                ('tvf_pin_mailer', models.BooleanField(default=False, help_text='Indicates if this TVF is for a PIN mailer')),
                ('run_today', models.BooleanField(default=False, help_text='Indicates if this TVF is scheduled to run today.')),
                ('request_received_date', models.DateTimeField(help_text='Date and time when the request was received/submitted')),
                ('request_ship_date', models.DateTimeField(blank=True, help_text='Requested ship date for the TVF (for SLA tracking)', null=True)),
                ('tvf_completed_date', models.DateTimeField(blank=True, help_text='Actual date and time when the TVF was completed', null=True)),
                ('s_code', models.CharField(blank=True, help_text='S-Code for the TVF', max_length=255, null=True)),
                ('d_code', models.CharField(blank=True, help_text='D-Code for the TVF', max_length=255, null=True)),
                ('comments', models.TextField(blank=True, help_text='General comments for the TVF', null=True)),
                ('pres_config_version', models.CharField(blank=True, help_text='Personalization Configuration Version', max_length=255, null=True)),
                ('proc_config_version', models.CharField(blank=True, help_text='Processing Configuration Version', max_length=255, null=True)),
                ('pin_config_version', models.CharField(blank=True, help_text='PIN Configuration Version', max_length=255, null=True)),
                ('last_status_update', models.DateTimeField(auto_now=True, help_text='Automatically updated timestamp of the last status change')),
                ('is_rejected', models.BooleanField(default=False, help_text='Indicates if the TVF has been rejected')),
                ('rejected_comments', models.TextField(blank=True, help_text='Additional comments for rejection', null=True)),
                ('rejected_date', models.DateTimeField(blank=True, help_text='Date and time of rejection', null=True)),
                ('customer', models.ForeignKey(help_text='The customer for this TVF', on_delete=django.db.models.deletion.PROTECT, related_name='test_requests', to='test_requests.customer')),
                ('project', models.ForeignKey(help_text='The project for this TVF', on_delete=django.db.models.deletion.PROTECT, related_name='test_requests', to='test_requests.project')),
                ('rejected_by', models.ForeignKey(blank=True, help_text='User who rejected the TVF', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='rejected_tvfs', to=settings.AUTH_USER_MODEL)),
                ('rejected_reason', models.ForeignKey(blank=True, help_text='Reason for rejection', null=True, on_delete=django.db.models.deletion.PROTECT, to='test_requests.rejectreason')),
                ('tvf_initiator', models.ForeignKey(help_text='The user who initiated this TVF', on_delete=django.db.models.deletion.PROTECT, related_name='initiated_tvfs', to=settings.AUTH_USER_MODEL)),
                ('current_phase', models.ForeignKey(blank=True, help_text='Current phase of the TVF lifecycle', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='current_tvfs', to='test_requests.testrequestphasedefinition')),
            ],
            options={
                'verbose_name': 'Test Request (TVF)',
                'verbose_name_plural': 'Test Requests (TVFs)',
                'ordering': ['-tvf_number'],
                'permissions': [],
            },
        ),
        migrations.CreateModel(
            name='TestRequestInputFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(help_text='Name of the input file', max_length=255)),
                ('date_file_received', models.DateTimeField(blank=True, help_text='Date and time when this input file was received', null=True)),
                ('card_co', models.CharField(blank=True, help_text='Card Control Order', max_length=255, null=True)),
                ('card_wo', models.CharField(blank=True, help_text='Card Work Order', max_length=255, null=True)),
                ('card_qty', models.IntegerField(default=0, help_text='Quantity of cards in this input file')),
                ('pin_co', models.CharField(blank=True, help_text='PIN Control Order', max_length=255, null=True)),
                ('pin_wo', models.CharField(blank=True, help_text='PIN Work Order', max_length=255, null=True)),
                ('pin_qty', models.IntegerField(default=0, help_text='Quantity of PINs expected in this input file')),
                ('test_request', models.ForeignKey(help_text='The TVF this input file entry belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='input_files_entries', to='test_requests.testrequest')),
            ],
            options={
                'verbose_name': 'Input File Entry',
                'verbose_name_plural': 'Input File Entries',
                'ordering': ['file_name'],
                'unique_together': {('test_request', 'file_name')},
            },
        ),
        migrations.CreateModel(
            name='TestRequestPhaseLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now, help_text='When the TVF entered this phase')),
                ('end_time', models.DateTimeField(blank=True, help_text='When the TVF exited this phase', null=True)),
                ('comments', models.TextField(blank=True, help_text='Comments on this phase transition', null=True)),
                ('phase_name', models.ForeignKey(help_text='The phase/department name', on_delete=django.db.models.deletion.PROTECT, to='test_requests.testrequestphasedefinition')),
                ('responsible_user', models.ForeignKey(blank=True, help_text='User responsible during this phase', null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('test_request', models.ForeignKey(help_text='The TVF for this phase log', on_delete=django.db.models.deletion.CASCADE, related_name='phase_logs', to='test_requests.testrequest')),
            ],
            options={
                'verbose_name': 'TVF Phase Log',
                'verbose_name_plural': 'TVF Phase Logs',
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='TestRequestPlasticCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manual_plastic_code', models.CharField(blank=True, help_text='Manually entered plastic code if not in lookup.', max_length=255, null=True)),
                ('quantity', models.IntegerField(help_text='Quantity for this plastic code')),
                ('thermal_colour', models.CharField(blank=True, help_text='Thermal color associated with this plastic code', max_length=255, null=True)),
                ('plastic_code_lookup', models.ForeignKey(blank=True, help_text='The specific plastic code used', null=True, on_delete=django.db.models.deletion.PROTECT, to='test_requests.plasticcodelookup')),
                ('test_request', models.ForeignKey(help_text='The TVF this plastic code entry belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='plastic_codes_entries', to='test_requests.testrequest')),
            ],
            options={
                'verbose_name': 'Plastic Code Entry',
                'verbose_name_plural': 'Plastic Code Entries',
                'ordering': ['plastic_code_lookup__code', 'manual_plastic_code'],
            },
        ),
        migrations.CreateModel(
            name='TestRequestQuality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('output_accordance_request', models.BooleanField(default=False, help_text='Output in accordance with request')),
                ('checked_against_specifications', models.BooleanField(default=False, help_text='Checked against specifications being tested')),
                ('quality_sign_off_date', models.DateTimeField(blank=True, help_text='Date and time of quality sign off', null=True)),
                ('quality_sign_off_by', models.ForeignKey(blank=True, help_text='User who signed off on quality', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='quality_signed_off_tvfs', to=settings.AUTH_USER_MODEL)),
                ('test_request', models.OneToOneField(help_text='The TVF this quality check is for', on_delete=django.db.models.deletion.CASCADE, related_name='quality_details', to='test_requests.testrequest')),
            ],
            options={
                'verbose_name': 'Quality Check',
                'verbose_name_plural': 'Quality Checks',
                'ordering': ['test_request__tvf_number'],
            },
        ),
        migrations.CreateModel(
            name='TestRequestShipping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_shipped', models.DateTimeField(blank=True, help_text='Date and time when the TVF was shipped', null=True)),
                ('ship_to_name', models.CharField(blank=True, help_text='Recipient Name', max_length=255, null=True)),
                ('ship_to_business_name', models.CharField(blank=True, help_text='Business Name', max_length=255, null=True)),
                ('ship_to_address_1', models.CharField(blank=True, help_text='Address Line 1', max_length=255, null=True)),
                ('ship_to_address_2', models.CharField(blank=True, help_text='Address Line 2', max_length=255, null=True)),
                ('ship_to_address_3', models.CharField(blank=True, help_text='Address Line 3', max_length=255, null=True)),
                ('ship_to_city', models.CharField(blank=True, help_text='City', max_length=255, null=True)),
                ('ship_to_state_province', models.CharField(blank=True, help_text='State/Province', max_length=255, null=True)),
                ('ship_to_postal_code', models.CharField(blank=True, help_text='Postal Code', max_length=20, null=True)),
                ('ship_to_country', models.CharField(blank=True, help_text='Country', max_length=255, null=True)),
                ('dispatch_method', models.ForeignKey(blank=True, help_text='Method of dispatch (e.g., XPRESSPOST)', null=True, on_delete=django.db.models.deletion.PROTECT, to='test_requests.dispatchmethod')),
                ('shipping_sign_off_by', models.ForeignKey(blank=True, help_text='User who signed off on shipping', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='shipping_signed_off_tvfs', to=settings.AUTH_USER_MODEL)),
                ('test_request', models.OneToOneField(help_text='The TVF this shipping info is for', on_delete=django.db.models.deletion.CASCADE, related_name='shipping_details', to='test_requests.testrequest')),
            ],
            options={
                'verbose_name': 'Shipping Information',
                'verbose_name_plural': 'Shipping Information',
                'ordering': ['dispatch_method__name'],
            },
        ),
        migrations.CreateModel(
            name='TrustportFolder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('folder_path', models.CharField(help_text='The actual Trustport folder path', max_length=500)),
                ('customer', models.ForeignKey(help_text='The customer this Trustport folder belongs to', on_delete=django.db.models.deletion.PROTECT, to='test_requests.customer')),
                ('project', models.ForeignKey(help_text='The project this Trustport folder belongs to', on_delete=django.db.models.deletion.PROTECT, to='test_requests.project')),
            ],
            options={
                'verbose_name': 'Trustport Folder',
                'verbose_name_plural': 'Trustport Folders',
                'ordering': ['folder_path'],
                'unique_together': {('customer', 'project', 'folder_path')},
            },
        ),
        migrations.AddField(
            model_name='testrequest',
            name='trustport_folder_actual',
            field=models.ForeignKey(blank=True, help_text='Actual Trustport folder used for this specific TVF', null=True, on_delete=django.db.models.deletion.PROTECT, to='test_requests.trustportfolder'),
        ),
        migrations.AddField(
            model_name='testrequest',
            name='tvf_environment',
            field=models.ForeignKey(help_text='The environment for this TVF (e.g., PAT)', on_delete=django.db.models.deletion.PROTECT, related_name='test_requests', to='test_requests.tvfenvironment'),
        ),
        migrations.AddField(
            model_name='testrequest',
            name='status',
            field=models.ForeignKey(help_text='Current status of the TVF', on_delete=django.db.models.deletion.PROTECT, related_name='test_requests_by_status', to='test_requests.tvfstatus'),
        ),
        migrations.AddField(
            model_name='testrequest',
            name='tvf_type',
            field=models.ForeignKey(help_text='The type of TVF', on_delete=django.db.models.deletion.PROTECT, related_name='test_requests', to='test_requests.tvftype'),
        ),
        migrations.CreateModel(
            name='TestRequestPAN',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pan_truncated', models.CharField(help_text='Truncated Primary Account Number (e.g., XXXXXXXXXXXX7067)', max_length=255)),
                ('is_available', models.BooleanField(default=False, help_text="Indicates if the PAN is available (from 'Avble' in zc_tvfpans)")),
                ('test_request_input_file', models.ForeignKey(help_text='The specific input file this PAN belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='pans', to='test_requests.testrequestinputfile')),
            ],
            options={
                'verbose_name': 'TVF PAN',
                'verbose_name_plural': 'TVF PANs',
                'ordering': ['pan_truncated'],
                'unique_together': {('test_request_input_file', 'pan_truncated')},
            },
        ),
    ]
